angular.module("mBoard.categories",["ui.bootstrap"]).config(["$stateProvider",function(e){e.state("categories",{url:"/categories",templateUrl:"app/core/categories/templates/categories.tpl.html"})}]);
angular.module("mBoard.latest",["ui.bootstrap"]).config(["$stateProvider",function(t){t.state("latest",{url:"/latest",templateUrl:"app/core/latest/templates/latest.tpl.html"})}]);
angular.module("mBoard.thread",["ui.bootstrap"]).config(["$stateProvider",function(t){t.state("thread",{url:"/thread/:id",template:'<div class="thread"><ui-view/></div>'})}]);

angular.module("mBoard",["ui.router","ui.bootstrap","toastr","mBoard.latest","mBoard.categories"]).run(["$rootScope","$state","$stateParams",function(r,e,o){r.$state=e,r.$stateParams=o,r.$on("$stateChangeStart",function(r,e,o,t,n){}),r.$on("$stateChangeSuccess",function(e,o,t,n,a){r.previousState=n.name,r.currentState=o.name,document.body.scrollTop=document.documentElement.scrollTop=0}),r.$on("$stateChangeError",function(r,o,t,n,a,s){console.error("Error while trying to change to state",o,s),e.go("landing")}),r.$on("$stateNotFound",function(r,o,t,n){console.error("State not found: ",o,", coming from",t),e.go("landing")}),r.$on("$viewContentLoaded",function(r){});var t="yxPJx5ySs8SWgumIEs2JfYVsI1OTU6MtN2C1iG8U",n="3t3byCFpjKO6RL48enhDucH7ETGtNAaxuUcJgTi6";Parse.initialize(t,n);var a=localStorage.getItem("sessionToken");a&&Parse.User.become(a).then(function(r){},function(r){localStorage.removeItem("sessionToken"),console.log(r)})}]).config(["$stateProvider","$urlRouterProvider","$httpProvider","$locationProvider","toastrConfig",function(r,e,o,t,n){"use strict";o.interceptors.push("errorsInterceptor"),e.when("","/"),e.otherwise("/"),angular.extend(n,{allowHtml:!0,positionClass:"toast-bottom-right"}),t.html5Mode(!0)}]).factory("errorsInterceptor",["$q","$injector","toastr",function(r,e,o){function t(e){var t=e.data,n=t.error?t.error.message||t.error.error:t;return console.log("Server error:",n),o.error("",n),r.reject(e)}function n(r){var e;return e&&(r.headers=r.headers||{},r.headers.Authorization="Bearer "+e),r}return{request:n,responseError:t}}]);
angular.module("mBoard.categories").controller("CategoriesCtrl",["$scope",function(o){}]);

angular.module("mBoard.latest").controller("LatestCtrl",["$scope",function(t){}]);





angular.module("mBoard").controller("MBoardCtrl",["$rootScope","$scope",function(o,r){}]);
angular.module("mBoard").directive("mbFooter",function(){return{restrict:"E",replace:!0,templateUrl:"app/common/components/footer/templates/footer.tpl.html"}});

angular.module("mBoard").directive("mbHeader",function(){return{restrict:"E",replace:!0,templateUrl:"app/common/components/header/templates/header.tpl.html"}});
angular.module("mBoard").factory("CategoriesSvc",["$http",function(e){function t(){return e.get("api/categories")}function r(t){return e.get("api/categories/"+t)}function a(t,r){return e.postt("api/categories",{name:t,latestThreads:r})}function o(t,r){return e.put("api/categories/"+t,{name:r})}function n(t){return e["delete"]("api/categories/"+t)}return{getCategories:t,getCategory:r,postCategory:a,putCategory:o,deleteCategory:n}}]);
angular.module("mBoard").factory("ThreadsSvc",["$http",function(t){function e(e,r){return t.get("api/threads",{params:{categoryId:e,skip:r}})}function r(e){return t.get("api/threads/"+e)}function a(e,r,a){return t.postt("api/threads",{title:e,body:r,categoryId:a})}function d(e,r,a,d){return t.put("api/threads/"+e,{title:r,body:a,categoryId:d})}function n(e){return t["delete"]("api/threads/"+e)}return{getThreads:e,getThread:r,postThread:a,putThread:d,deleteThread:n}}]);
//# sourceMappingURL=data:application/json;base64,
